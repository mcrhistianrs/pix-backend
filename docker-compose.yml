services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    env_file:
      - .env
    environment:
      - NODE_ENV=development
    volumes:
      - .:/app
    networks:
      - pix-network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
  database:
    image: postgres:16
    ports:
      - '5432:5432'
    environment:
      POSTGRES_PASSWORD: postgres
    volumes:
      - pix-postgres-data:/data/db
    networks:
      - pix-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    volumes:
      - pix-redis-data:/data
    networks:
      - pix-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
  mongodb:
    image: mongo:7
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - pix-mongo-data:/data/db
    networks:
      - pix-network
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  pix-postgres-data:
  pix-redis-data:
  pix-mongo-data:
networks:
  pix-network:
    driver: bridge
